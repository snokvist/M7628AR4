1) Fast-path NAT (biggest win)
uci set firewall.@defaults[0].flow_offloading='1'
uci -q delete firewall.@defaults[0].flow_offloading_hw   # 7628 has no hw offload
uci commit firewall
/etc/init.d/firewall restart
# verify:
nft list ruleset | grep -A2 flowtable


This can add ~30–60% routing/NAT throughput on these chips.




uci set firewall.@defaults[0].flow_offloading='1'
uci commit firewall
/etc/init.d/firewall restart


2) Don’t run SQM unless you need it

Cake/fq_codel shaping is CPU-expensive here. If you installed SQM for later, leave it disabled:

/etc/init.d/sqm stop
/etc/init.d/sqm disable

3) Keep RAM breathing (zram + lighter services)

Tune zram-swap (if you installed kmod-zram zram-swap):

uci -q delete system.@zram[0]
uci add system zram
uci set system.@zram[0].enabled='1'
uci set system.@zram[0].compression='lz4'   # lz4 is fastest on 580 MHz MIPS
uci set system.@zram[0].size='32'           # MB; 24–32 is sensible for 64 MB RAM
uci commit system

/etc/init.d/zram enable
/etc/init.d/zram start
swapon -s


Trim daemons you don’t use (saves CPU/RAM). Examples:

/etc/init.d/uhttpd stop; /etc/init.d/uhttpd disable         # if you won’t use LuCI
/etc/init.d/odhcpd stop; /etc/init.d/odhcpd disable         # if you don’t use IPv6
opkg remove odhcpd-ipv6only odhcp6c luci-proto-ipv6 2>/dev/null


Shrink logging:

uci set system.@system[0].log_size='64'
uci set system.@system[0].log_buffer_size='32'
uci commit system; /etc/init.d/log restart

4) Cut connection-tracking overhead (good on low-RAM)
uci set firewall.@defaults[0].synflood_protect='1'
uci commit firewall; /etc/init.d/firewall restart

cat >> /etc/sysctl.conf << 'EOF'
net.netfilter.nf_conntrack_max=4096
net.core.netdev_max_backlog=1000
net.ipv4.tcp_fastopen=3
EOF
sysctl -p /etc/sysctl.conf

5) Wi-Fi settings that help CPU

2.4 GHz:

uci set wireless.radio0.country='SE'
uci set wireless.radio0.htmode='HT20'          # 20 MHz is friendlier to CPU/airtime
uci set wireless.default_radio0.wmm='1'
uci set wireless.default_radio0.ieee80211w='0' # disable MFP unless required
uci commit wireless; wifi reload


5 GHz (MT7663E):

uci set wireless.radio1.country='SE'
uci set wireless.radio1.htmode='VHT40'         # VHT80 is OK, but VHT40 cuts CPU load
uci set wireless.default_radio1.wmm='1'
uci set wireless.default_radio1.ieee80211w='0'
uci commit wireless; wifi reload


Optional: raise beacon interval to shave interrupts a touch (APs only):

uci set wireless.default_radio0.beacon_int='200'
uci set wireless.default_radio1.beacon_int='200'
uci commit wireless; wifi reload

6) Bridge/multicast noise

Turn on IGMP snooping so IPTV/multicast doesn’t flood Wi-Fi:

uci set network.lan.igmp_snooping='1'
uci commit network; /etc/init.d/network restart

7) Keep LuCI light

You already switched to luci-light. In LuCI → Status pages, drop the auto-refresh interval (or disable it) to reduce CPU spikes.

8) USB/storage (only when needed)

If you added block-mount/USB storage but don’t actually plug a drive, either remove them or create a minimal fstab so blockd doesn’t churn. When you do use storage:

block detect > /etc/config/fstab
/etc/init.d/fstab enable; /etc/init.d/fstab start

-----

Short answer: that 28 MB is just a limit, not pre-allocated RAM. tmpfs only uses what’s actually stored under /tmp (right now ~250 KB). So it isn’t “eating” your 64 MB—until you upload big files to /tmp.

If you still want to cap it tighter (to avoid big uploads causing OOM), you can shrink it:

Shrink now (one-off)
mount -o remount,size=8M /tmp
df -h | grep /tmp   # verify

Make it persistent (fstab entry)
uci add fstab mount
uci set fstab.@mount[-1].target='/tmp'
uci set fstab.@mount[-1].fstype='tmpfs'
uci set fstab.@mount[-1].options='nosuid,nodev,noatime,mode=1777,size=8M'
uci set fstab.@mount[-1].enabled='1'
uci commit fstab
/etc/init.d/fstab enable
/etc/init.d/fstab restart





Runtime trims (no rebuild needed)
1) Disable IPv6 userland (if you don’t need v6)
/etc/init.d/odhcpd stop; /etc/init.d/odhcpd disable
opkg remove --force-depends odhcpd-ipv6only odhcp6c luci-proto-ipv6 2>/dev/null

uci -q batch << 'EOF'
set network.globals.ula_prefix=''
set dhcp.lan.ra='disabled'
set dhcp.lan.dhcpv6='disabled'
set dhcp.lan.ndp='disabled'
commit dhcp
commit network
EOF

/etc/init.d/network restart

2) Slim dnsmasq
uci -q batch << 'EOF'
set dhcp.@dnsmasq[0].cachesize='100'      # default 150; go lower if you like
set dhcp.@dnsmasq[0].dnsforwardmax='150'  # cap concurrent queries
set dhcp.@dnsmasq[0].ednspacket_max='1232'
set dhcp.@dnsmasq[0].cache_neg_ttl='60'
set dhcp.@dnsmasq[0].rebind_protection='0'
commit dhcp
EOF
/etc/init.d/dnsmasq restart

3) Reduce conntrack size & timeouts

(Default nf_conntrack can chew RAM.)

uci -q batch << 'EOF'
set system.@system[0].hostname='OpenWrt'
set system.@system[0].conloglevel='7'
# kernel sysctls
set system.@system[0].ttylogin='0'
set system.@system[0].zram_size_mb='24'
set system.@system[0].zram_comp_algo='lz4'
commit system
EOF

# conntrack limits via sysctl.d
cat >/etc/sysctl.d/99-tiny.conf <<'EOT'
net.netfilter.nf_conntrack_max=2048
net.netfilter.nf_conntrack_generic_timeout=60
net.netfilter.nf_conntrack_tcp_timeout_established=1800
net.core.rmem_max=262144
net.core.wmem_max=262144
EOT
sysctl -p /etc/sysctl.d/99-tiny.conf


(If your environment is tiny, you can push nf_conntrack_max down to 1024.)

4) Trim logging & LuCI/uHTTPd
uci set system.@system[0].log_size='32'    # KB in RAM for logd (default 64)
uci set system.@system[0].log_buffer_size='16'  # kernel dmesg buffer (KB)
uci commit system

uci -q batch << 'EOF'
set uhttpd.main.max_connections='50'
set uhttpd.main.script_timeout='30'
set uhttpd.main.network_timeout='15'
set uhttpd.main.tcp_keepalive='1'
del_list uhttpd.main.index_page='/cgi-bin/luci'  # keep index lean (optional)
commit uhttpd
EOF
/etc/init.d/uhttpd restart


Also make sure you’re not using TLS (you already dropped luci-ssl) to avoid libopenssl in RAM.

5) tmpfs & zram (you already started)

Keep /tmp at 12–16 MB:

uci set system.@system[0].tmpfs_size='12m'
uci commit system


zram: 24–32 MB is the sweet spot on 64 MB RAM:

/etc/init.d/zram enable
/etc/init.d/zram restart
swapon -s


Verify kernel has swap: zcat /proc/config.gz | grep ^CONFIG_SWAP=y.

6) Cull services you don’t need
for S in nlbwmon collectd sqm uhttpd-mod-ubus # (remove ones you truly don’t need)
do /etc/init.d/$S stop 2>/dev/null; /etc/init.d/$S disable 2>/dev/null; done


(Keep uhttpd-mod-ubus if you want LuCI fully functional. Disable SQM unless you actually use it; it eats RAM/CPU.)

7) Wi-Fi userland

If you never run STA/mesh, wpad-mini is even smaller than wpad-basic (but loses 802.11r/k/v and SAE/OWE options).

For AP-only WPA2-PSK, wpad-mini is usually enough:

opkg remove wpad-basic-*; opkg install wpad-mini


(Or bake wpad-mini into DEVICE_PACKAGES and remove the basic variant there.)

Quick “what changed” meter

Removing IPv6 userland, PPP, and extra mt76 modules typically frees ~4–8 MB RAM total after boot.

Smaller dnsmasq/conntrack cuts another ~1–2 MB depending on load.

Dropping TLS for LuCI avoids openssl/mbedtls in RAM during normal operation.

zram helps cushion spikes (web UI, opkg) without OOM.




If your ISP is plain DHCP over Ethernet (most cable/FTTH routers)
uci set network.wan.proto='dhcp'
uci -q delete network.wan.username
uci -q delete network.wan.password
# kill the IPv6 WAN interface if it exists (you removed odhcp6c)
uci -q delete network.wan6
uci commit network
/etc/init.d/network restart

If your ISP requires PPPoE

Reinstall the PPPoE stack and keep proto pppoe:

opkg update
opkg install ppp ppp-mod-pppoe kmod-pppoe kmod-pppox kmod-slhc
/etc/init.d/network restart

If the warning is actually for WAN6 (IPv6) only

You removed IPv6 client (odhcpc6), so delete the interface:

uci -q delete network.wan6
uci commit network
/etc/init.d/network restart
